{
  parserClass="com.alekseyzhelo.evilislands.mobplugin.script.EIScriptParser"

  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIScriptPsiElement"
  extends="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptPsiElementImpl"

  psiClassPrefix="EI"
  psiImplClassSuffix="Impl"
  psiPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi"
  psiImplPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl"

  elementTypeHolderClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypes"
  elementTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptElementType"
  tokenTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTokenType"

  psiImplUtilClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptPsiImplUtil"
  generateTokenAccessors=false
}

//utility---------------
//                     |
//                    \|/
// TODO v2: recover from errors before and in-between of these elements?
scriptFile ::= functionDeclaration+ | globalVars? declarations? scripts? worldScript?
// apparently this structure is not enforced by game.exe,
// declarations and implementations can be interspersed through the script text
// such disorder will not stand, of course

// utility
private meta comma_separated_list ::= <<param>> ( &RPAREN | (( COMMA <<param>> )*))
{
  pin(".*")=1
}

private meta comma_separated_list_rec ::= <<comma_separated_list <<param>>>>
{
  recoverWhile='<<recover>>'
}

//noinspection BnfUnusedRule
private ignored ::= (WHOLE_LINE_COMMENT COMMENT) // just to generate the ScriptToken

functionDeclaration ::= IDENTIFIER formalParams (COLON type)?
{
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EICallableDeclaration"
  methods=[getUseScope getCallableParams getCallableType]
}
// utility end

private formalParams ::= LPAREN <<comma_separated_list (formalParameter)>>? RPAREN {pin=1}

formalParameter ::= IDENTIFIER COLON type
{
  pin=1
  recoverWhile=listVarRecover
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIVariableBaseImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIVariableBase"
}

globalVars ::= GLOBALVARS LPAREN globalVarsDefs? RPAREN  {pin=1 methods=[toString]}

declarations ::= scriptDeclaration+  {methods=[toString]}

scripts ::= scriptImplementation+  {methods=[toString]}

worldScript ::= WORLDSCRIPT LPAREN scriptThenBody RPAREN {pin=1 recoverWhile=worldScriptRecover methods=[toString]}

//  or: (external rule like com.intellij.lang.java.parser.ExpressionParser.parseArgumentList)?
private globalVarsDefs ::= <<comma_separated_list (globalVar)>>

globalVar ::= IDENTIFIER COLON type
{
  pin=1
  recoverWhile=listVarRecover
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIVariableBaseImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIVariableBase"
  methods=[toString]
}

scriptDeclaration ::= DECLARESCRIPT IDENTIFIER formalParams
{
  pin=1
  recoverWhile=scriptDeclarationRecover
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EICallableDeclaration"
  methods=[getCallableParams getCallableType toString]
}

scriptImplementation ::= SCRIPT IDENTIFIER LPAREN scriptBlock+ RPAREN  // or *?
{
  pin=1
  recoverWhile=scriptImplRecover
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIScriptNamedElementMixin"
  methods=[getReference toString]
}

scriptBlock ::= scriptIfBlock scriptThenBlock {pin=1 recoverWhile=scriptBlockRecover methods=[toString]}

scriptIfBlock ::= IF LPAREN callOnly* RPAREN {pin=1 recoverWhile=scriptIfBlockRecover methods=[toString]}

scriptThenBlock ::= THEN LPAREN scriptThenBody RPAREN  {pin=1 recoverWhile=scriptThenBlockRecover methods=[toString]}

private callOnly ::= functionCall | incompleteCall
// TODO v2: bit of a cop-out?
incompleteCall ::= IDENTIFIER
{
  extends=expression
  consumeTokenMethod="consumeTokenFast"
  methods=[getType getReference]
}

private scriptThenBody ::= scriptStatement*

scriptStatement ::= callStatement
                  | assignment
                  | forBlock
                  | forIfBlock
{
  consumeTokenMethod="consumeTokenFast"
}

callStatement ::= functionCall
{
  extends=scriptStatement
  methods=[getType getName toString]
  consumeTokenMethod="consumeTokenFast"
}

assignment ::= variableAccess EQUALS expression
{
  extends=scriptStatement
  pin=1
  recoverWhile=scriptAssignmentRecover
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIAssignmentMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIAssignmentMixin"
  methods=[toString]
  consumeTokenMethod="consumeTokenFast"
}

// TODO v2: Sum and ForIf?
forBlock ::= FOR LPAREN variableAccess COMMA reference_expression RPAREN LPAREN scriptStatement* RPAREN
{
  pin=1
  extends=scriptStatement
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIForBlockBaseImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIForBlockBase"
  methods=[toString]
  consumeTokenMethod="consumeTokenFast"
}

forIfBlock ::= FOR_IF LPAREN variableAccess COMMA reference_expression COMMA callOnly RPAREN LPAREN scriptStatement* RPAREN
{
  pin=1
  extends=scriptStatement
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIForBlockBaseImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIForBlockBase"
  methods=[toString]
  consumeTokenMethod="consumeTokenFast"
}

expression ::= literal
             | reference_expression
{
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIExpressionBase"
  consumeTokenMethod="consumeTokenFast"
}

literal ::= FLOATNUMBER | CHARACTER_STRING
{
  extends=expression
  methods=[getType getReference toString]
  consumeTokenMethod="consumeTokenFast"
}

private reference_expression ::= functionCall | variableAccess

// TODO v2: append !LPAREN ?
// TODO v2: could _be_ its own reference, like in Java PSI (same for script impl and function call)
variableAccess ::= IDENTIFIER
{
  extends=expression
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIScriptNamedElementMixin"
  methods=[getReference getType toString]
  consumeTokenMethod="consumeTokenFast"
}

functionCall ::= IDENTIFIER params
{
  extends=expression
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EIScriptNamedElementMixin"
  methods=[getReference getType getNthArgument toString]
  consumeTokenMethod="consumeTokenFast"
}

params ::=  non_empty_params | empty_params  // EI script has very few empty params in general
private empty_params ::= LPAREN RPAREN { consumeTokenMethod = 'consumeTokenFast' }
private non_empty_params::= LPAREN <<comma_separated_list_rec expression non_empty_params_recover>> RPAREN
{
  pin = 1
  consumeTokenMethod = 'consumeTokenFast'
}

type ::= FLOAT | STRING | OBJECT | GROUP
{
  mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EITypeMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.base.EITypeMixin"
}

private listVarRecover ::= !(COMMA | RPAREN | DECLARESCRIPT | SCRIPT | WORLDSCRIPT)
private scriptDeclarationRecover ::= !(DECLARESCRIPT | SCRIPT | WORLDSCRIPT)
private scriptImplRecover ::= !(SCRIPT | WORLDSCRIPT | <<eof>>)
private scriptBlockRecover ::= !(IF | IDENTIFIER | SCRIPT | WORLDSCRIPT | RPAREN !RPAREN)
private scriptIfBlockRecover ::= !(IF | THEN | SCRIPT | WORLDSCRIPT | RPAREN !RPAREN)
private scriptThenBlockRecover ::= !(IF | THEN | SCRIPT | WORLDSCRIPT | IDENTIFIER RPAREN | RPAREN !RPAREN)
private scriptAssignmentRecover ::= !(RPAREN | IDENTIFIER | FOR | FOR_IF)
private worldScriptRecover ::= !(<<eof>>)
private non_empty_params_recover ::= !(RPAREN | IDENTIFIER LPAREN | FOR | FOR_IF)

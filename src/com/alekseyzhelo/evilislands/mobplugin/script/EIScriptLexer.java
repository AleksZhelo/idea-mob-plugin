/* The following code was generated by JFlex 1.4.3 on 23/07/15 12:07 AM */

package com.alekseyzhelo.evilislands.mobplugin.script;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/07/15 12:07 AM from the specification file
 * <tt>C:/cool_stuff/java/idea-mob-plugin/src/com/alekseyzhelo/evilislands/mobplugin/script/EIScript.flex</tt>
 */
class EIScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\4\1\1\22\0\1\4\1\0\1\44"+
    "\1\32\3\0\1\45\1\40\1\41\2\0\1\42\1\34\1\36\1\5"+
    "\12\35\1\43\2\0\1\37\3\0\1\11\1\20\1\23\1\27\1\22"+
    "\1\6\1\17\1\30\1\15\1\21\1\32\1\7\1\32\1\16\1\10"+
    "\1\25\1\32\1\14\1\13\1\12\1\24\1\26\1\31\3\32\1\0"+
    "\1\3\2\0\1\33\1\0\1\11\1\20\1\23\1\27\1\22\1\6"+
    "\1\17\1\30\1\15\1\21\1\32\1\7\1\32\1\16\1\10\1\25"+
    "\1\32\1\14\1\13\1\12\1\24\1\26\1\31\3\32\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\11\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\1"+
    "\1\15\1\2\6\3\1\16\4\3\1\4\1\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\2\1\3\1\30\12\3\1\31\6\3\1\32\4\3"+
    "\1\33\2\3\1\34\1\35\1\36\14\3\1\37\3\3"+
    "\1\40\1\3\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\114\0\162\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\u023a\0\u0260"+
    "\0\114\0\u0286\0\114\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\276\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u01ee"+
    "\0\u01ee\0\114\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\u044e\0\u0474\0\276\0\u049a\0\u04c0\0\u04e6"+
    "\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\276"+
    "\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\276\0\u06fa"+
    "\0\u0720\0\u0746\0\u076c\0\276\0\u0792\0\u07b8\0\276\0\276"+
    "\0\276\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2"+
    "\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\276\0\u09a6\0\u09cc"+
    "\0\u09f2\0\276\0\u0a18\0\276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\0\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\7\1\11\1\12\1\7\1\13\1\7\1\14\7\7"+
    "\1\15\1\7\1\16\1\7\1\3\1\17\1\20\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\1\30\1\31\1\32\40\27\1\33\1\27\53\0\1\34"+
    "\46\0\1\7\1\35\1\36\25\7\16\0\30\7\16\0"+
    "\12\7\1\37\15\7\16\0\22\7\1\40\5\7\16\0"+
    "\4\7\1\41\10\7\1\42\12\7\16\0\1\43\27\7"+
    "\16\0\1\7\1\44\4\7\1\45\21\7\16\0\14\7"+
    "\1\46\13\7\16\0\2\7\1\47\25\7\45\0\1\50"+
    "\45\0\1\20\1\51\7\0\1\27\3\0\40\27\1\0"+
    "\1\27\2\0\1\31\43\0\2\52\1\0\1\53\2\52"+
    "\1\54\3\52\1\55\1\52\1\56\1\52\1\57\1\52"+
    "\1\60\23\52\1\61\1\62\1\34\1\63\1\4\43\34"+
    "\6\0\2\7\1\64\25\7\16\0\6\7\1\65\21\7"+
    "\16\0\13\7\1\66\14\7\16\0\14\7\1\67\13\7"+
    "\16\0\6\7\1\70\21\7\16\0\6\7\1\71\21\7"+
    "\16\0\2\7\1\72\25\7\16\0\2\7\1\73\25\7"+
    "\16\0\15\7\1\74\12\7\16\0\6\7\1\75\21\7"+
    "\12\0\1\4\51\0\3\7\1\76\24\7\16\0\14\7"+
    "\1\77\13\7\16\0\10\7\1\100\17\7\16\0\7\7"+
    "\1\101\20\7\16\0\7\7\1\102\20\7\16\0\12\7"+
    "\1\103\15\7\16\0\16\7\1\104\11\7\16\0\1\7"+
    "\1\105\26\7\16\0\1\7\1\106\26\7\16\0\4\7"+
    "\1\107\23\7\16\0\15\7\1\110\12\7\16\0\10\7"+
    "\1\111\17\7\16\0\17\7\1\112\10\7\16\0\3\7"+
    "\1\113\24\7\16\0\17\7\1\114\10\7\16\0\3\7"+
    "\1\115\24\7\16\0\21\7\1\116\6\7\16\0\4\7"+
    "\1\117\23\7\16\0\11\7\1\120\16\7\16\0\4\7"+
    "\1\121\23\7\16\0\1\7\1\122\26\7\16\0\6\7"+
    "\1\123\21\7\16\0\5\7\1\124\22\7\16\0\20\7"+
    "\1\125\7\7\16\0\14\7\1\126\13\7\16\0\15\7"+
    "\1\127\12\7\16\0\3\7\1\130\24\7\16\0\5\7"+
    "\1\131\22\7\16\0\6\7\1\132\21\7\16\0\6\7"+
    "\1\133\21\7\16\0\15\7\1\134\12\7\16\0\7\7"+
    "\1\135\20\7\16\0\5\7\1\136\22\7\16\0\6\7"+
    "\1\137\21\7\16\0\17\7\1\140\10\7\16\0\7\7"+
    "\1\141\20\7\16\0\4\7\1\142\23\7\16\0\17\7"+
    "\1\143\10\7\16\0\4\7\1\144\23\7\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2622];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\14\1\6\11\2\1\1\11\1\1\1\11"+
    "\15\1\1\0\11\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // currently unused
    StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  EIScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        // return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return ScriptTypes.GROUP;
          }
        case 34: break;
        case 24: 
          { return ScriptTypes.FOR;
          }
        case 35: break;
        case 23: 
          { string.append( '\'' );
          }
        case 36: break;
        case 3: 
          { return ScriptTypes.IDENTIFIER;
          }
        case 37: break;
        case 25: 
          { return ScriptTypes.THEN;
          }
        case 38: break;
        case 33: 
          { return ScriptTypes.DECLARESCRIPT;
          }
        case 39: break;
        case 31: 
          { return ScriptTypes.GLOBALVARS;
          }
        case 40: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 41: break;
        case 6: 
          { return ScriptTypes.LPAREN;
          }
        case 42: break;
        case 11: 
          { string.append( yytext() );
          }
        case 43: break;
        case 9: 
          { return ScriptTypes.COLON;
          }
        case 44: break;
        case 28: 
          { return ScriptTypes.OBJECT;
          }
        case 45: break;
        case 19: 
          { string.append( '\r' );
          }
        case 46: break;
        case 4: 
          { return ScriptTypes.FLOATNUMBER;
          }
        case 47: break;
        case 30: 
          { return ScriptTypes.SCRIPT;
          }
        case 48: break;
        case 14: 
          { return ScriptTypes.IF;
          }
        case 49: break;
        case 12: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 50: break;
        case 29: 
          { return ScriptTypes.STRING;
          }
        case 51: break;
        case 21: 
          { string.append( '\b' );
          }
        case 52: break;
        case 26: 
          { return ScriptTypes.FLOAT;
          }
        case 53: break;
        case 32: 
          { return ScriptTypes.WORLDSCRIPT;
          }
        case 54: break;
        case 18: 
          { string.append( '\t' );
          }
        case 55: break;
        case 5: 
          { return ScriptTypes.EQUALS;
          }
        case 56: break;
        case 8: 
          { return ScriptTypes.COMA;
          }
        case 57: break;
        case 15: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 58: break;
        case 16: 
          { string.append( '\\' );
          }
        case 59: break;
        case 7: 
          { return ScriptTypes.RPAREN;
          }
        case 60: break;
        case 10: 
          { yybegin(STRING); string.setLength(0);
          }
        case 61: break;
        case 20: 
          { string.append( '\n' );
          }
        case 62: break;
        case 17: 
          { string.append( '\f' );
          }
        case 63: break;
        case 13: 
          { yybegin(YYINITIAL); return ScriptTypes.CHARACTER_STRING;
          }
        case 64: break;
        case 22: 
          { string.append( '\"' );
          }
        case 65: break;
        case 2: 
          { /* ignore */
          }
        case 66: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

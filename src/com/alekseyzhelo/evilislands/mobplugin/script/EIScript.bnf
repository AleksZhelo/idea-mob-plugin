{
  parserClass="com.alekseyzhelo.evilislands.mobplugin.script.EIScriptParser"

  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptPsiElement"
  extends="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptPsiElementImpl"

  psiClassPrefix="EI"
  psiImplClassSuffix="Impl"
  psiPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi"
  psiImplPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl"

  elementTypeHolderClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypes"
  elementTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptElementType"
  tokenTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTokenType"

  psiImplUtilClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptPsiImplUtil"
}

// TODO analyze correctness and complexity

//utility---------------
//                     |
//                    \|/
scriptFile ::= functionDeclaration+ | globalVars? declarations? scripts? worldScript?

// utility
private meta comma_separated_list ::= <<param>> ( &RPAREN | (( COMMA <<param>> )*)) {pin(".*")=1 recoverWhile=comma_separated_list_recover}

private ignored ::= (COMMENT) // just to generate the ScriptToken? necessary?

functionDeclaration ::= scriptIdentifier formalParams (COLON type)? {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin" methods=[getDisplayableType]}
// utility end

globalVars ::= GLOBALVARS LPAREN globalVarsDefs? RPAREN  {methods=[toString]}

// apparently this structure is not enforced by game.exe, declarations and implementations can be interspersed through the script text
declarations ::= scriptDeclaration*  {methods=[toString]}

scripts ::= scriptImplementation*  {methods=[toString]}

worldScript ::= WORLDSCRIPT LPAREN scriptThenBody RPAREN {methods=[toString]}

private globalVarsDefs ::= <<comma_separated_list (globalVar)>>

globalVar ::= scriptIdentifier COLON type {pin=1 recoverWhile=globalVarRecover mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin" methods=[toString]}

// TODO: do script params shadow global vars?
scriptDeclaration ::= DECLARESCRIPT scriptIdentifier formalParams {pin=1 recoverWhile=scriptDeclarationRecover mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin" methods=[toString]}

scriptImplementation ::= SCRIPT scriptIdentifier LPAREN scriptBody RPAREN {pin=1 mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptImplementationMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin" methods=[getReference]} // TODO implements own interface?

private scriptBody ::= scriptBlock+

scriptBlock ::= scriptIfBlock scriptThenBlock {methods=[toString]}

scriptIfBlock ::= IF LPAREN ifConjunction RPAREN {pin=1 recoverWhile=scriptIfBlockRecover methods=[toString]}

private ifConjunction ::= functionCall*

scriptThenBlock ::= THEN LPAREN scriptThenBody RPAREN  {pin=2 recoverWhile=scriptThenBlockRecover methods=[toString]}

private scriptThenBody ::= scriptExpression*

// TODO: how to do references here?
scriptExpression ::= assignment | functionCall | forBlock {methods=[getType toString]}

forBlock ::= FOR LPAREN variableAccess COMMA variableAccess RPAREN LPAREN scriptThenBody RPAREN

private formalParams ::= LPAREN <<comma_separated_list (formalParameter)>>? RPAREN

formalParameter ::= scriptIdentifier COLON type  {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin"}

// TODO: type checking!
params ::=  <<comma_separated_list (expression)>>   // TODO: how to do references here?

// TODO: how to do references here?
expression ::= FLOATNUMBER | CHARACTER_STRING | functionCall | variableAccess {methods=[getType toString]}

variableAccess ::= scriptIdentifier {methods=[getReference getType toString]}

functionCall ::= scriptIdentifier LPAREN params? RPAREN {pin=2 methods=[getReference getType toString]}

assignment ::= scriptIdentifier EQUALS expression {pin=2 methods=[getReference toString]} // TODO: this pin and error recovery stuff

scriptIdentifier ::= IDENTIFIER {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptPsiIdentifierMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptPsiIdentifierMixin"}

type ::= FLOAT | STRING | OBJECT | GROUP {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptTypeMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypeMixin"}

private globalVarRecover ::= !(IDENTIFIER | COMMA | RPAREN)
private scriptDeclarationRecover ::= !(DECLARESCRIPT | SCRIPT)
private scriptIfBlockRecover ::= !(THEN | RPAREN)  // can't get this kind of stuff to work :(
private scriptThenBlockRecover ::= !(IF | RPAREN)  // can't get this kind of stuff to work :(
private comma_separated_list_recover ::= !(RPAREN)

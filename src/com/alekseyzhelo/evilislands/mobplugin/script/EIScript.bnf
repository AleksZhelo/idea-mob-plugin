{
  parserClass="com.alekseyzhelo.evilislands.mobplugin.script.EIScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="EI"
  psiImplClassSuffix="Impl"
  psiPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi"
  psiImplPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl"

  elementTypeHolderClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypes"
  elementTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptElementType"
  tokenTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTokenType"
}

scriptFile ::= globalVars declarations scripts worldScript

private meta comma_separated_list ::= <<param>> ( COMMA <<param>> ) *

private ignored ::= (COMMENT)

globalVars ::= GLOBALVARS LPAREN RPAREN | GLOBALVARS LPAREN globalVarsDefs RPAREN

declarations ::= scriptDeclaration*

scripts ::= scriptImplementation*

worldScript ::= WORLDSCRIPT LPAREN scriptThenBody RPAREN

globalVarsDefs ::= <<comma_separated_list (globalVarDef)>>

globalVarDef ::= IDENTIFIER COLON type

scriptDeclaration ::= DECLARESCRIPT IDENTIFIER formalParams

scriptImplementation ::= SCRIPT IDENTIFIER LPAREN scriptBody RPAREN

scriptBody ::= scriptBlock+

scriptBlock ::= scriptIfBlock scriptThenBlock

scriptIfBlock ::= IF LPAREN ifConjunction RPAREN

ifConjunction ::= functionCall*

scriptThenBlock ::= THEN LPAREN scriptThenBody RPAREN

scriptThenBody ::= scriptExpression*

scriptExpression ::= assignment | functionCall | forBlock

forBlock ::= FOR LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN LPAREN scriptThenBody RPAREN

formalParams ::= LPAREN RPAREN | LPAREN <<comma_separated_list (formalParameter)>> RPAREN

formalParameter ::= IDENTIFIER COLON type

params ::= LPAREN RPAREN | LPAREN <<comma_separated_list (expression)>> RPAREN

expression ::= FLOATNUMBER | CHARACTER_STRING | functionCall | variable

variable ::= IDENTIFIER

functionCall ::= IDENTIFIER params

assignment ::= IDENTIFIER EQUALS expression

type ::= FLOAT | STRING | OBJECT | GROUP
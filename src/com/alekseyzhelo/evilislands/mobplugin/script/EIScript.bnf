{
  parserClass="com.alekseyzhelo.evilislands.mobplugin.script.EIScriptParser"

  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptPsiElement"
  extends="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptPsiElementImpl"

  psiClassPrefix="EI"
  psiImplClassSuffix="Impl"
  psiPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi"
  psiImplPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl"

  elementTypeHolderClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypes"
  elementTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptElementType"
  tokenTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTokenType"

  psiImplUtilClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptPsiImplUtil"
}

scriptFile ::= globalVars? declarations? scripts? worldScript?

private meta comma_separated_list ::= <<param>> ( COMMA <<param>> ) *

private ignored ::= (COMMENT)

globalVars ::= GLOBALVARS LPAREN RPAREN | GLOBALVARS LPAREN globalVarsDefs RPAREN

declarations ::= scriptDeclaration*

scripts ::= scriptImplementation*

worldScript ::= WORLDSCRIPT LPAREN scriptThenBody RPAREN

private globalVarsDefs ::= <<comma_separated_list (globalVar)>>

globalVar ::= scriptIdentifier COLON type {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElement"}

scriptDeclaration ::= DECLARESCRIPT scriptIdentifier formalParams {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElement"}

scriptImplementation ::= SCRIPT scriptIdentifier LPAREN scriptBody RPAREN {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptImplementationMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElement"} // TODO implements own interface?

scriptBody ::= scriptBlock+

scriptBlock ::= scriptIfBlock scriptThenBlock

scriptIfBlock ::= IF LPAREN ifConjunction RPAREN

ifConjunction ::= functionCall*

scriptThenBlock ::= THEN LPAREN scriptThenBody RPAREN

scriptThenBody ::= scriptExpression*

scriptExpression ::= assignment | functionCall | forBlock

forBlock ::= FOR LPAREN scriptIdentifier COMMA scriptIdentifier RPAREN LPAREN scriptThenBody RPAREN

formalParams ::= LPAREN RPAREN | LPAREN <<comma_separated_list (formalParameter)>> RPAREN

formalParameter ::= scriptIdentifier COLON type

params ::= LPAREN RPAREN | LPAREN <<comma_separated_list (expression)>> RPAREN

expression ::= FLOATNUMBER | CHARACTER_STRING | functionCall | variableAccess

variableAccess ::= scriptIdentifier {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElement" methods=[getName setName getNameIdentifier getReference]}

functionCall ::= scriptIdentifier params

assignment ::= scriptIdentifier EQUALS expression

scriptIdentifier ::= IDENTIFIER

type ::= FLOAT | STRING | OBJECT | GROUP
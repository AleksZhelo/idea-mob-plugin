{
  parserClass="com.alekseyzhelo.evilislands.mobplugin.script.EIScriptParser"

  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptPsiElement"
  extends="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptPsiElementImpl"

  psiClassPrefix="EI"
  psiImplClassSuffix="Impl"
  psiPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi"
  psiImplPackage="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl"

  elementTypeHolderClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypes"
  elementTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptElementType"
  tokenTypeClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTokenType"

  psiImplUtilClass="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.EIScriptPsiImplUtil"
}

// TODO analyze correctness and complexity

//utility---------------
//                     |
//                    \|/
scriptFile ::= functionDeclaration+ | globalVars? declarations? scripts? worldScript?

// utility
private meta comma_separated_list ::= <<param>> ( COMMA <<param>> ) *

private ignored ::= (COMMENT)

functionDeclaration ::= scriptIdentifier formalParams COLON type | scriptIdentifier formalParams{mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin"}
// utility end

globalVars ::= GLOBALVARS LPAREN RPAREN | GLOBALVARS LPAREN globalVarsDefs RPAREN

// apparently this structure is not enforced by game.exe, declarations and implementations can be interspersed through the script text
declarations ::= scriptDeclaration*

scripts ::= scriptImplementation*

worldScript ::= WORLDSCRIPT LPAREN scriptThenBody RPAREN

private globalVarsDefs ::= <<comma_separated_list (globalVar)>>

globalVar ::= scriptIdentifier COLON type {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin"}

scriptDeclaration ::= DECLARESCRIPT scriptIdentifier formalParams {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin"}

scriptImplementation ::= SCRIPT scriptReference LPAREN scriptBody RPAREN {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptImplementationMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin"} // TODO implements own interface?

private scriptBody ::= scriptBlock+

scriptBlock ::= scriptIfBlock scriptThenBlock

scriptIfBlock ::= IF LPAREN ifConjunction RPAREN

private ifConjunction ::= functionCall*

scriptThenBlock ::= THEN LPAREN scriptThenBody RPAREN

private scriptThenBody ::= scriptExpression*

scriptExpression ::= assignment | functionCall | forBlock

forBlock ::= FOR LPAREN scriptReference COMMA scriptReference RPAREN LPAREN scriptThenBody RPAREN

private formalParams ::= LPAREN RPAREN | LPAREN <<comma_separated_list (formalParameter)>> RPAREN

formalParameter ::= scriptIdentifier COLON type  {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptNamedElementMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptNamedElementMixin"}

params ::= LPAREN RPAREN | LPAREN <<comma_separated_list (expression)>> RPAREN

expression ::= FLOATNUMBER | CHARACTER_STRING | functionCall | variableAccess

variableAccess ::= scriptReference

functionCall ::= scriptReference params

assignment ::= scriptReference EQUALS expression

scriptIdentifier ::= IDENTIFIER {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptPsiIdentifierMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptPsiIdentifierMixin"}

scriptReference ::= scriptIdentifier {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptPsiReferenceImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptPsiReference"}

type ::= FLOAT | STRING | OBJECT | GROUP {mixin="com.alekseyzhelo.evilislands.mobplugin.script.psi.impl.ScriptTypeMixinImpl"
  implements="com.alekseyzhelo.evilislands.mobplugin.script.psi.ScriptTypeMixin"}